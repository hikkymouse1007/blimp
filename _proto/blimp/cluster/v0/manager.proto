syntax = "proto3";

package blimp.cluster.v0;

option go_package = "github.com/kelda-inc/blimp/pkg/proto/cluster";

service Manager {
  rpc CreateSandbox(CreateSandboxRequest) returns (CreateSandboxResponse) {}
  rpc DeployToSandbox(DeployRequest) returns (DeployResponse) {}
  rpc DeleteSandbox(DeleteSandboxRequest) returns (DeleteSandboxResponse) {}
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
  rpc WatchStatus(GetStatusRequest) returns (stream GetStatusResponse) {}
  rpc CheckVersion(CheckVersionRequest) returns (CheckVersionResponse) {}
}

message CheckVersionRequest {
  string version = 1;
}

message CheckVersionResponse {
  string Version = 1;
  string DisplayMessage = 2;
  enum Action {
    OK = 0;
    EXIT = 1;
  }
  Action action = 3;
}

message CreateSandboxRequest {
  string token = 1;
  ComposeFile composeFile = 2;
  map<string, RegistryCredential> registryCredentials = 3;
}

message RegistryCredential {
  string username = 1;
  string password = 2;
}

message CreateSandboxResponse {
  string SandboxAddress = 1;
  string SandboxCert = 2;
  KubeCredentials kubeCredentials = 3;
  string ImageNamespace = 4;
}

message DeployRequest {
  string token = 1;
  ComposeFile composeFile = 2;
  map<string, string> builtImages = 3;
}

message ComposeFile {
  string path = 1;
  string contents = 2;
}

message DeployResponse {
  string strict_parse_error = 1;
}

message KubeCredentials {
  string host = 1;
  string caCrt = 2;
  string token = 3;
  string namespace = 4;
}

message DeleteSandboxRequest {
  string token = 1;
}

message DeleteSandboxResponse {
}

message GetStatusRequest {
  string token = 1;
}

message GetStatusResponse {
  SandboxStatus status = 1;
}

message SandboxStatus {
  map<string, ServiceStatus> services = 1;
}

message ServiceStatus {
  string phase = 1;
}
