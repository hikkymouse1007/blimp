// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blimp/sandbox/v0/controller.proto

package sandbox

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TunnelHeader struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TunnelHeader) Reset()         { *m = TunnelHeader{} }
func (m *TunnelHeader) String() string { return proto.CompactTextString(m) }
func (*TunnelHeader) ProtoMessage()    {}
func (*TunnelHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc63420a4e9f729, []int{0}
}

func (m *TunnelHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelHeader.Unmarshal(m, b)
}
func (m *TunnelHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelHeader.Marshal(b, m, deterministic)
}
func (m *TunnelHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelHeader.Merge(m, src)
}
func (m *TunnelHeader) XXX_Size() int {
	return xxx_messageInfo_TunnelHeader.Size(m)
}
func (m *TunnelHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelHeader.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelHeader proto.InternalMessageInfo

func (m *TunnelHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TunnelHeader) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *TunnelHeader) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type EOF struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EOF) Reset()         { *m = EOF{} }
func (m *EOF) String() string { return proto.CompactTextString(m) }
func (*EOF) ProtoMessage()    {}
func (*EOF) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc63420a4e9f729, []int{1}
}

func (m *EOF) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EOF.Unmarshal(m, b)
}
func (m *EOF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EOF.Marshal(b, m, deterministic)
}
func (m *EOF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EOF.Merge(m, src)
}
func (m *EOF) XXX_Size() int {
	return xxx_messageInfo_EOF.Size(m)
}
func (m *EOF) XXX_DiscardUnknown() {
	xxx_messageInfo_EOF.DiscardUnknown(m)
}

var xxx_messageInfo_EOF proto.InternalMessageInfo

// The first message the Client sends to the server must be a header.  After
// that all messages either direction must be bufs.  Optionally, either
// direction may send an EOF to indicate they have no more to send.
type TunnelMsg struct {
	// Types that are valid to be assigned to Msg:
	//	*TunnelMsg_Header
	//	*TunnelMsg_Buf
	//	*TunnelMsg_Eof
	Msg                  isTunnelMsg_Msg `protobuf_oneof:"msg"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TunnelMsg) Reset()         { *m = TunnelMsg{} }
func (m *TunnelMsg) String() string { return proto.CompactTextString(m) }
func (*TunnelMsg) ProtoMessage()    {}
func (*TunnelMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fc63420a4e9f729, []int{2}
}

func (m *TunnelMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelMsg.Unmarshal(m, b)
}
func (m *TunnelMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelMsg.Marshal(b, m, deterministic)
}
func (m *TunnelMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelMsg.Merge(m, src)
}
func (m *TunnelMsg) XXX_Size() int {
	return xxx_messageInfo_TunnelMsg.Size(m)
}
func (m *TunnelMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelMsg proto.InternalMessageInfo

type isTunnelMsg_Msg interface {
	isTunnelMsg_Msg()
}

type TunnelMsg_Header struct {
	Header *TunnelHeader `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type TunnelMsg_Buf struct {
	Buf []byte `protobuf:"bytes,2,opt,name=buf,proto3,oneof"`
}

type TunnelMsg_Eof struct {
	Eof *EOF `protobuf:"bytes,3,opt,name=eof,proto3,oneof"`
}

func (*TunnelMsg_Header) isTunnelMsg_Msg() {}

func (*TunnelMsg_Buf) isTunnelMsg_Msg() {}

func (*TunnelMsg_Eof) isTunnelMsg_Msg() {}

func (m *TunnelMsg) GetMsg() isTunnelMsg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *TunnelMsg) GetHeader() *TunnelHeader {
	if x, ok := m.GetMsg().(*TunnelMsg_Header); ok {
		return x.Header
	}
	return nil
}

func (m *TunnelMsg) GetBuf() []byte {
	if x, ok := m.GetMsg().(*TunnelMsg_Buf); ok {
		return x.Buf
	}
	return nil
}

func (m *TunnelMsg) GetEof() *EOF {
	if x, ok := m.GetMsg().(*TunnelMsg_Eof); ok {
		return x.Eof
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TunnelMsg) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TunnelMsg_Header)(nil),
		(*TunnelMsg_Buf)(nil),
		(*TunnelMsg_Eof)(nil),
	}
}

func init() {
	proto.RegisterType((*TunnelHeader)(nil), "blimp.sandbox.v0.TunnelHeader")
	proto.RegisterType((*EOF)(nil), "blimp.sandbox.v0.EOF")
	proto.RegisterType((*TunnelMsg)(nil), "blimp.sandbox.v0.TunnelMsg")
}

func init() {
	proto.RegisterFile("blimp/sandbox/v0/controller.proto", fileDescriptor_5fc63420a4e9f729)
}

var fileDescriptor_5fc63420a4e9f729 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0xc6, 0x04, 0x3a, 0xad, 0x20, 0x8b, 0x42, 0x50, 0x90, 0x9a, 0x53, 0x04, 0xdd,
	0x0d, 0xf1, 0xe2, 0xb9, 0xd2, 0x92, 0x83, 0xa5, 0x10, 0xc4, 0x83, 0xb7, 0xfc, 0xd9, 0xa4, 0x21,
	0xc9, 0x6e, 0x48, 0x36, 0xc5, 0xef, 0xe0, 0x97, 0x96, 0x4c, 0xaa, 0x88, 0xa2, 0xb7, 0x79, 0xbb,
	0x3f, 0xde, 0x7b, 0xcc, 0xc0, 0x75, 0x5c, 0x15, 0x75, 0xc3, 0xbb, 0x48, 0xa6, 0xb1, 0x7a, 0xe3,
	0x7b, 0x8f, 0x27, 0x4a, 0xea, 0x56, 0x55, 0x95, 0x68, 0x59, 0xd3, 0x2a, 0xad, 0xe8, 0x29, 0x22,
	0xec, 0x80, 0xb0, 0xbd, 0xe7, 0x3c, 0xc1, 0xfc, 0xb9, 0x97, 0x52, 0x54, 0x81, 0x88, 0x52, 0xd1,
	0x52, 0x0a, 0xc7, 0x32, 0xaa, 0x85, 0x4d, 0x16, 0xc4, 0x9d, 0x86, 0x38, 0x0f, 0x6f, 0x8d, 0x6a,
	0xb5, 0x7d, 0xb4, 0x20, 0xee, 0x49, 0x88, 0x33, 0x3d, 0x03, 0x53, 0xab, 0x52, 0x48, 0xdb, 0x40,
	0x70, 0x14, 0x8e, 0x09, 0xc6, 0x6a, 0xbb, 0x76, 0xde, 0x09, 0x4c, 0x47, 0xd7, 0x4d, 0x97, 0xd3,
	0x07, 0xb0, 0x76, 0x68, 0x8e, 0xa6, 0x33, 0xff, 0x8a, 0xfd, 0x6c, 0xc1, 0xbe, 0x57, 0x08, 0x26,
	0xe1, 0x81, 0xa7, 0x14, 0x8c, 0xb8, 0xcf, 0x30, 0x77, 0x1e, 0x4c, 0xc2, 0x41, 0xd0, 0x1b, 0x30,
	0x84, 0xca, 0x30, 0x76, 0xe6, 0x9f, 0xff, 0xb6, 0x5a, 0x6d, 0xd7, 0x03, 0x2a, 0x54, 0xb6, 0x34,
	0xc1, 0xa8, 0xbb, 0xdc, 0x7f, 0x01, 0x78, 0xfc, 0x5a, 0x04, 0x0d, 0xc0, 0x1a, 0xd3, 0xe8, 0xe5,
	0x5f, 0x3d, 0x36, 0x5d, 0x7e, 0xf1, 0xdf, 0xa7, 0x33, 0x71, 0x89, 0x47, 0x96, 0xec, 0xf5, 0x36,
	0x2f, 0xf4, 0xae, 0x8f, 0x59, 0xa2, 0x6a, 0x5e, 0x8a, 0x2a, 0x8d, 0xee, 0x0a, 0x99, 0xf0, 0xf1,
	0x0c, 0x4d, 0x99, 0x73, 0x5c, 0xfa, 0xe7, 0x41, 0x62, 0x0b, 0xe5, 0xfd, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x27, 0x89, 0xf8, 0xd9, 0xa8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (Controller_TunnelClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (Controller_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[0], "/blimp.sandbox.v0.Controller/Tunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerTunnelClient{stream}
	return x, nil
}

type Controller_TunnelClient interface {
	Send(*TunnelMsg) error
	Recv() (*TunnelMsg, error)
	grpc.ClientStream
}

type controllerTunnelClient struct {
	grpc.ClientStream
}

func (x *controllerTunnelClient) Send(m *TunnelMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerTunnelClient) Recv() (*TunnelMsg, error) {
	m := new(TunnelMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	Tunnel(Controller_TunnelServer) error
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) Tunnel(srv Controller_TunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Tunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).Tunnel(&controllerTunnelServer{stream})
}

type Controller_TunnelServer interface {
	Send(*TunnelMsg) error
	Recv() (*TunnelMsg, error)
	grpc.ServerStream
}

type controllerTunnelServer struct {
	grpc.ServerStream
}

func (x *controllerTunnelServer) Send(m *TunnelMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerTunnelServer) Recv() (*TunnelMsg, error) {
	m := new(TunnelMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blimp.sandbox.v0.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tunnel",
			Handler:       _Controller_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "blimp/sandbox/v0/controller.proto",
}
